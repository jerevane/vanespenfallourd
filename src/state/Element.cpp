// Generated by dia2code
#ifndef STATE__ELEMENT__C
#define STATE__ELEMENT__C


#include "Element.h"

namespace state {
  class Element;

    Element::Element() {
        HP = MaxHP = 50;
        MP = MaxMP = 20;
        Strength = Agility = Intelligence = 5;
        MagicResist = PhysResist = 0;
        Dot = "0_0";
        IsDead = false;
        Level = 1;
        IsCharacter = false;
        items = new Item();
        abilities = new Ability();
    }


    int Element::getHP() {
        return HP;
    }

    void Element::setHP(int hp) {
        if(hp <= MaxHP)
            HP = hp;
        else HP = MaxHP;
    }

    int Element::getMP() {
        return MP;
    }

    void Element::setMP(int mp) {
        if(mp <= MaxMP) MP = mp;
        else MP = MaxMP;
    }

    int Element::getMaxHP() {
        return MaxHP;
    }

    void Element::setMaxHP(int maxhp) {
        MaxHP = maxhp;
    }

    int Element::getMaxMP() {
        return MaxMP;
    }

    void Element::setMaxMP(int maxmp) {
        MaxMP = maxmp;
    }

    int Element::getStrength() {
        return Strength;
    }

    void Element::setStrength(int strength) {
        Strength = strength;
    }

    int Element::getAgility() {
        return Agility;
    }

    void Element::setAgility(int agility) {
        Agility = agility;
    }

    int Element::getIntelligence() {
        return Intelligence;
    }

    void Element::setIntelligence(int intelligence) {
        Intelligence = intelligence;
    }

    bool Element::getIsDead() {
        return IsDead;
    }

    void Element::setIsDead(bool isdead) {
        IsDead = isdead;
    }

    float Element::getMagicResist() {
        return MagicResist;
    }

    void Element::setMagicResist(float magicresist) {
        MagicResist = magicresist;
    }

    float Element::getPhysResist() {
        return PhysResist;
    }

    void Element::setPhysResist(float physresist) {
        PhysResist = physresist;
    }

    int Element::getLevel() {
        return Level;
    }

    void Element::setLevel(int level) {
        Level = level;
    }

    std::string Element::getDot() {
        return Dot;
    }

    void Element::setDot(std::string dot) {
        Dot = dot;
    }

    bool Element::getIsCharacter() {
        return IsCharacter;
    }

    void Element::setIsCharacter(bool ischaracter) {
        IsCharacter = ischaracter;
    }

    void Element::setName(std::string name) {
        this->name = name;
    }

    Ability* Element::getAbility() {
        return abilities;
    }

    std::vector<int> Element::CanUse() {
        std::map<int,bool> tab_abilities = abilities->getAbility();
        std::vector<int> tab_final ;
        tab_final.clear();
        if(tab_abilities.empty()) ;
        else {
            for(int i =0; i<15;++i){
                if(tab_abilities[i]==true){
                    if(getMP()>=10){
                        tab_final.push_back(i);
                    }
                }

            }
        }
        for (int i = 16; i < 19; ++i) {
            if (items->getItem()[i] != 0) {
                tab_final.push_back(i);
            }
        }
        tab_final.push_back(15);
        return tab_final;
    }

    std::string Element::getName() {
        return name;
    }

    void Element::setItem(Item *item) {
        items = item;
    }

    Item *Element::getItem() {
        return items;
    }

    void Element::setAbility(Ability *ability) {
        abilities = ability;
    }

    void Element::setId(int id) {
        Id = id;
    }

    int Element::getId() {
        return Id;
    }
}

#endif
