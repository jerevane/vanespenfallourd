// Generated by dia2code
#ifndef STATE__STATE__H
#define STATE__STATE__H

#include <vector>
#include <map>

namespace state {
  class Node;
  class Element;
  class ElementList;
  class Observer;
};
namespace instance {
  class Screen;
}

#include "Observer.h"
#include "StateTypeID.h"
#include "ElementList.h"
#include "instance/Screen.h"
#include "Node.h"

namespace state {

  /// class State - 
  class State : public state::Observer {
    // Associations
    // Attributes
  public:
    std::vector<state::Node*> tabNode;
    std::map<int,int> turnOrderMap;
    Element* currentTurn;
    std::map<int,int>::reverse_iterator iter;
  protected:
    Node* node;
    ElementList* elementlist;
    int Id;
    bool playerFinishedTurn;
    // Operations
  public:
    State ();
    State (ElementList* elementlist, Node* node, int id);
    ~State ();
    Node* getNode ();
    void setNode (Node* node);
    ElementList* getElementList ();
    void setElementList (ElementList* elementlist);
    int getId ();
    void setId (int id);
    void run (int id);
    void playTurn (Element* element);
    bool getPlayerFinishedTurn ();
    void setPlayerFinishedTurn (bool pft);
  };

};

#endif
