// Generated by dia2code
#ifndef STATE__CHARACTER__C
#define STATE__CHARACTER__C

#include "Character.h"

namespace state {

    Character::Character(std::string name) :Element(){
        setName(name);
        XPToNextLevel = 50;
        PowerToOverdrive = 5;
        IsCharacter = true;
    }

    Character::Character(int characterID, std::string name) :Element(){
        setName(name);
        XPToNextLevel = 50;
        PowerToOverdrive = 5;
        IsCharacter = true;
        if(characterID==0){
            SphereGridInstance = new SphereGrid(0, this);
        }
        else SphereGridInstance = new SphereGrid(1, this);
    }

    void Character::LevelUp() {
        setLevel(getLevel()+1);
        SphereGridInstance->setPosition(SphereGridInstance->getPosition()+1);
        SphereGridInstance->LevelUp();
    }

    void Character::GainXP(int xp) {
        int xp_to_next = getXpToNextLevel();
        int tab_xp[30];
        int i;
        // Tableau d'xp necessaire pour chaque level
        for(i=0;i<30;i++){
            tab_xp[i] = 100*i+50;
        }
        // Si il y a assez d'xp pour monter au niveau suppÃ©rieur
        if(xp > xp_to_next){
            LevelUp();
            xp = xp - xp_to_next;
            // Si il y a encore assez pour un second niveau
            if(xp > tab_xp[getLevel()-1]) {
                xp = xp - tab_xp[getLevel() - 1];
                LevelUp();
                setXpToNextLevel(tab_xp[getLevel() - 1] - xp);
            }
            else setXpToNextLevel(tab_xp[getLevel()-1]-xp);
        }
        else setXpToNextLevel(xp_to_next-xp);
    }

    SphereGrid* Character::getSphereGridInstance() {
        return SphereGridInstance;
    }

    void Character::setSphereGridInstance(SphereGrid* spheregridinstance) {
        SphereGridInstance = spheregridinstance;
    }

    int Character::getXpToNextLevel() {
        return XPToNextLevel;
    }

    void Character::setXpToNextLevel(int xptonextlevel) {
        XPToNextLevel = xptonextlevel;
    }

    int Character::getPowerToOverdrive() {
        return PowerToOverdrive;
    }

    void Character::setPowerToOverdrive(int powertooverdrive) {
        PowerToOverdrive = powertooverdrive;
    }

    void Character::managementOverdrive(int overdriveAbility) {
        int power = getPowerToOverdrive();
        if(power==0) abilities->setAbility(overdriveAbility);
        else setPowerToOverdrive(power -1);
    }

    Character::Character(std::string name, int characterID, Item * item) :Element() {
        setName(name);
        XPToNextLevel = 50;
        PowerToOverdrive = 5;
        IsCharacter = true;
        items = item;
        if(characterID==0){
            SphereGridInstance = new SphereGrid(0, this);
        }
        else SphereGridInstance = new SphereGrid(1, this);
    }

    Element *Character::clone() {
        Character* c = new Character(this->getName());

        c->setHP(this->getHP());
        c->setMaxHP(this->getMaxHP());
        c->setMP(this->getMP());
        c->setMaxMP(this->getMaxMP());

        c->setStrength(this->getStrength());
        c->setAgility(this->getAgility());
        c->setIntelligence(this->getIntelligence());

        c->setAbility(this->getAbility());

        c->setId(this->getId());
        c->setItem(this->getItem()->clone());
        c->setLevel(this->getLevel());
        c->setDot(this->getDot());
        c->setIsCharacter(this->getIsCharacter());

        c->setPhysResist(this->getPhysResist());
        c->setMagicResist(this->getMagicResist());

        c->setSphereGridInstance(SphereGridInstance);
        c->setXPtoNextLevel(XPToNextLevel);
        c->setPowerToOverdrive(PowerToOverdrive);

        return c;
    }

    void Character::setXPtoNextLevel(int xptonextlevel) {
        XPToNextLevel = xptonextlevel;
    }


};

#endif
