// Generated by dia2code
#ifndef SERVER__USERDB__C
#define SERVER__USERDB__C

#include <json/json.h>
#include <algorithm>
#include "UserDB.h"

namespace server {
  class User;


}

using namespace Net;

namespace server {

    void UserDB::getUser(const Rest::Request &request, Http::ResponseWriter response) {

        auto id = request.param(":id").as<int>();

        for(User* i : users)
        {
            if (i->id == id) {
                Json::Value user;
                Json::FastWriter jsonwriter;
                user["id"] = i->id;
                user["name"] = i->name;
                response.send(Http::Code::Ok,jsonwriter.write(user));
            }
        }
        response.send(Http::Code::Not_Found);

    }

    void UserDB::addOrModUser(const Rest::Request &request, Http::ResponseWriter response) {

        Json::Value user;
        Json::Reader reader;
        reader.parse(request.body(), user);

        bool resSent = false;

        User* usr = new User((int&)user[0], (std::string&)user[1]);
        for (User* i : users)
        {
            if (i->id == (int&)user["id"]){
                users.erase(remove(users.begin(), users.end(), i), users.end());
                users.push_back(usr);
                resSent = true;
                response.send(Http::Code::Ok);
            }

        }
        if (!resSent){
            users.push_back(usr);
            response.send(Http::Code::Ok);
        }

    }

    void UserDB::getAllUsers(const Rest::Request &request, Http::ResponseWriter response) {
        Json::Value allusers;
        Json::FastWriter writer;
        int incr;
        for (User* i : users)
        {
            Json::Value user;
            user["id"] = i->id;
            user["name"] = i->name;
            allusers[std::to_string(incr)] = user;
            ++incr;
        }
        response.send(Http::Code::Ok, writer.write(allusers));
    }

    void UserDB::removeUser(const Rest::Request &request, Http::ResponseWriter response) {

        auto id = request.param(":id").as<int>();

        for (User* i : users)
        {
            if (i->id == id){
                users.erase(remove(users.begin(), users.end(), i), users.end());
                response.send(Http::Code::Ok);
            }

        }
        response.send(Http::Code::Not_Found);
    }

};

#endif
