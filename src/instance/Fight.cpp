// Generated by dia2code
#ifndef INSTANCE__FIGHT__C
#define INSTANCE__FIGHT__C


namespace sf {
  class RenderWindow;
};
namespace instance {
  class Screen;
}

#include "Fight.h"
#include <map>
#include <render/FightRenderer.h>
#include "../state/ElementList.h"
#include "../state/Element.h"

namespace instance
{

    Fight::Fight(sf::RenderWindow* w, render::FightRenderer* rd, state::State* state) : Screen(w),
                                                                                        renderer(rd),
                                                                                        state(state) 
    {
        state->playTurn(state->getElementList()->element.at(state->iter->second));
        ++state->iter;
    }

    void Fight::init()
    {
        

        for (auto i = 0; i <= state->getElementList()->element.size();i++)
        {
            //Sort elements by agility to determine turn order.
            state->turnOrderMap.insert(std::pair<int, int>(state->getElementList()->element.at(i)->getAgility(),i));

            if (state->getElementList()->element.at(i)->getIsCharacter())
            {
                if (!state->getElementList()->element.at(i)->getIsDead())
                {
                    //No use yet, just in case
                } else
                {
                    //If character is dead, bring back to life with 1HP
                    state->getElementList()->element.at(i)->setIsDead(false);
                    state->getElementList()->element.at(i)->setHP(1);
                }
            }
        }
        //Sets the iterator to loop through the map following the turn order
        state->iter = state->turnOrderMap.rbegin();
    }


    Fight::~Fight() {}

    void Fight::eventHandler()
    {
        if((event.type == sf::Event::KeyPressed)&(state->currentTurn->getIsCharacter()))
        {
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
            {
                if (currentAction == "attack")
                {
                    currentAction = "overdrive";
                    //update UI
                }
                if (currentAction == "spell")
                {
                    currentAction = "item";
                    //update UI
                }
            }
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
            {
                if (currentAction == "item")
                {
                    currentAction = "spell";
                    //update UI
                }
                if (currentAction == "overdrive")
                {
                    currentAction = "attack";
                    //update UI
                }
            }
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
            {
                if (currentAction == "item")
                {
                    currentAction = "overdrive";
                    //update UI
                }
                if (currentAction == "spell")
                {
                    currentAction = "attack";
                    //update UI
                }
            }
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
            {
                if (currentAction == "attack")
                {
                    currentAction = "spell";
                    //update UI
                }
                if (currentAction == "overdrive")
                {
                    currentAction = "item";
                    //update UI
                }
            }
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Return))
            {
                if (currentAction == "item")
                {

                }
                if (currentAction == "overdrive")
                {

                }
                if (currentAction == "spell")
                {

                }
                if (currentAction == "attack")
                {

                }
            }


        }
    }

    state::State *Fight::getState() {
        return state;
    }

    Rules *Fight::getRules() {
        return rules;
    }

    void Fight::setRules(Rules *rules) {
        this->rules = rules;
    }

};

#endif
