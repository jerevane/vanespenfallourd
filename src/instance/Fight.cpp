// Generated by dia2code
#ifndef INSTANCE__FIGHT__C
#define INSTANCE__FIGHT__C


namespace sf {
  class RenderWindow;
};
namespace instance {
  class Screen;
}

#include "Fight.h"
#include <map>
#include <render/FightRenderer.h>
#include <iostream>
#include "../state/ElementList.h"
#include "../state/Element.h"

namespace instance
{

    Fight::Fight(sf::RenderWindow* w, render::FightRenderer* rd,
                 state::State* state, engine::Engine* engine) : Screen(w, state, engine), renderer(rd)
    {
        //state->turnInit(state->getElementList()->element.at(state->iter->second));
        //++state->iter;
    }

    void Fight::init()
    {
        state->needScreenChange = false;
        std::cout << std::to_string(engine->getRules()->getTurnList().size()) << std::endl;
        engine->turnInit(state->getElementList()->element.at(0));

        for (auto i = 0; i < state->getElementList()->element.size();i++)
        {
            //Sort elements by agility to determine turn order.
            //state->turnOrderMap.insert(std::pair<int, int>(state->getElementList()->element.at(i)->getAgility(),i));

            if (state->getElementList()->element.at(i)->getIsCharacter())
            {
                if (!state->getElementList()->element.at(i)->getIsDead())
                {
                    //No use yet, just in case
                } else
                {
                    //If character is dead, bring back to life with 1HP
                    state->getElementList()->element.at(i)->setIsDead(false);
                    state->getElementList()->element.at(i)->setHP(1);
                }
            }
        }
        //Sets the iterator to loop through the map following the turn order
        //state->iter = state->turnOrderMap.rbegin();
    }


    Fight::~Fight() {}

    void Fight::eventHandler()
    {
        if((event.type == sf::Event::KeyPressed)&(state->currentTurn->getIsCharacter()))
        {
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Down))
            {
                if (state->currentAction == "attack")
                {
                    engine::MoveInUI* cmd = new engine::MoveInUI();
                    cmd->setChange("overdrive");
                    //update UI
                }
                if (state->currentAction == "spell")
                {
                    engine::MoveInUI* cmd = new engine::MoveInUI();
                    cmd->setChange("item");
                    //update UI
                }
            }
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Up))
            {
                if (state->currentAction == "item")
                {
                    engine::MoveInUI* cmd = new engine::MoveInUI();
                    cmd->setChange("spell");
                    //update UI
                }
                if (state->currentAction == "overdrive")
                {
                    engine::MoveInUI* cmd = new engine::MoveInUI();
                    cmd->setChange("attack");
                    //update UI
                }
            }
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Left))
            {
                if (state->currentAction == "item")
                {
                    engine::MoveInUI* cmd = new engine::MoveInUI();
                    cmd->setChange("overdrive");
                    //update UI
                }
                if (state->currentAction == "spell")
                {
                    engine::MoveInUI* cmd = new engine::MoveInUI();
                    cmd->setChange("attack");
                    //update UI
                }
            }
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Right))
            {
                if (state->currentAction == "attack")
                {
                    engine::MoveInUI* cmd = new engine::MoveInUI();
                    cmd->setChange("spell");
                    //update UI
                }
                if (state->currentAction == "overdrive")
                {
                    engine::MoveInUI* cmd = new engine::MoveInUI();
                    cmd->setChange("item");
                    //update UI
                }
            }
            if(sf::Keyboard::isKeyPressed(sf::Keyboard::Return))
            {
                if (state->currentAction == "item")
                {
                    state->setPlayerFinishedTurn(true);
                }
                if (state->currentAction == "overdrive")
                {
                    state->setPlayerFinishedTurn(true);

                }
                if (state->currentAction == "spell")
                {
                    state->setPlayerFinishedTurn(true);

                }
                if (state->currentAction == "attack")
                {

                    state->setPlayerFinishedTurn(true);

                }
            }


        }
    }

    state::State *Fight::getState() {
        return state;
    }

};

#endif
