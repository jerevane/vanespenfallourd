// Generated by dia2code
#ifndef INSTANCE__FIGHT__C
#define INSTANCE__FIGHT__C


namespace sf {
    class RenderWindow;
};
namespace instance {
    class Screen;
}

#include "Fight.h"
#include <iostream>
#include <typeinfo>
#include <ai/RandomChoice.h>
#include <ai/RandomGoodChoice.h>
#include <ai/SmartChoice.h>
#include "FightUI.h"
#include "TargetUI.h"
#include "SpellUI.h"

namespace instance {

    Fight::Fight(sf::RenderWindow *w, render::FightRenderer *rd,
                 state::State *state, engine::Engine *engine) : Screen(w, state, engine),
                                                                renderer(rd) {
        ui = new FightUI(window);
    }

    void Fight::init() {
        spellCounter = 0;
        state->needScreenChange = false;
        state->currentAction = "attack";
        engine->target = state->getElementList()->element.at(2);
        engine->targetIndex = 2;

        for (auto i = 0; i < state->getElementList()->element.size(); i++) {
            //Sort elements by agility to determine turn order.

            if (state->getElementList()->element.at(i)->getIsCharacter()) {
                if (!state->getElementList()->element.at(i)->getIsDead()) {
                    //No use yet, just in case
                } else {
                    //If character is dead, bring back to life with 1HP
                    state->getElementList()->element.at(i)->setIsDead(false);
                    state->getElementList()->element.at(i)->setHP(1);
                }
            }
        }
    }


    Fight::~Fight() {}

    void Fight::eventHandler() {
        if ((event.type == sf::Event::KeyPressed ) & ((state->currentTurn->getIsCharacter() &
                !engine->getRules()->getAICharNeeded()) | (!state->currentTurn->getIsCharacter() &
                    !engine->getRules()->getAIMonsterNeeded())  )) {
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
                if (ui->idstr == "FightUI") {
                    if (state->currentAction == "attack") {
                        engine::MoveInUI *cmd = new engine::MoveInUI(state, 1, "overdrive");
                        engine->addCmd(cmd);
                        ((FightUI *) ui)->menuItemSwitch(((FightUI *) ui)->attack, ((FightUI *) ui)->overdrive);
                    }
                    if (state->currentAction == "spell") {
                        engine::MoveInUI *cmd = new engine::MoveInUI(state, 1, "item");
                        engine->addCmd(cmd);
                        ((FightUI *) ui)->menuItemSwitch(((FightUI *) ui)->abilities, ((FightUI *) ui)->item);
                    }
                } else if (ui->idstr == "TargetUI") {
                } else if (ui->idstr == "SpellUI") {
                    int prevcountervalue = spellCounter;
                    if ((spellCounter+3) < ((SpellUI *) ui)->maxSpell) {
                        spellCounter += 3;
                        ((SpellUI *) ui)->menuItemSwitch(*((SpellUI *) ui)->spellTexts[prevcountervalue],
                                                         *((SpellUI *) ui)->spellTexts[spellCounter]);
                    }
                }
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                if (ui->idstr == "FightUI") {

                    if (state->currentAction == "item") {
                        engine::MoveInUI *cmd = new engine::MoveInUI(state, 1, "spell");
                        engine->addCmd(cmd);
                        ((FightUI *) ui)->menuItemSwitch(((FightUI *) ui)->item, ((FightUI *) ui)->abilities);
                    }
                    if (state->currentAction == "overdrive") {
                        engine::MoveInUI *cmd = new engine::MoveInUI(state, 1, "attack");
                        engine->addCmd(cmd);
                        ((FightUI *) ui)->menuItemSwitch(((FightUI *) ui)->overdrive, ((FightUI *) ui)->attack);
                    }
                } else if (ui->idstr == "TargetUI") {
                } else if (ui->idstr == "SpellUI") {
                    int prevcountervalue = spellCounter;
                    if ((spellCounter-3) >= 0) {
                        spellCounter -= 3;
                        ((SpellUI *) ui)->menuItemSwitch(*((SpellUI *) ui)->spellTexts[prevcountervalue],
                                                         *((SpellUI *) ui)->spellTexts[spellCounter]);
                    }
                }
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
                if (ui->idstr == "FightUI") {

                    if (state->currentAction == "item") {
                        engine::MoveInUI *cmd = new engine::MoveInUI(state, 1, "overdrive");
                        engine->addCmd(cmd);
                        ((FightUI *) ui)->menuItemSwitch(((FightUI *) ui)->item, ((FightUI *) ui)->overdrive);
                    }
                    if (state->currentAction == "spell") {
                        engine::MoveInUI *cmd = new engine::MoveInUI(state, 1, "attack");
                        engine->addCmd(cmd);
                        ((FightUI *) ui)->menuItemSwitch(((FightUI *) ui)->abilities, ((FightUI *) ui)->attack);
                    }
                } else if (ui->idstr == "TargetUI") {
                    if (engine->target == state->getElementList()->element
                            .at(0)) {
                        engine->target = state->getElementList()->element
                                .at(state->getElementList()->element.size() - 1);
                        ((TargetUI *) ui)->menuItemSwitch(renderer->spriteList.at(renderer->spriteList.size() - 1));
                        engine->targetIndex = renderer->spriteList.size() - 1;
                    } else {
                        engine->target = state->getElementList()->element.at(engine->targetIndex - 1);
                        ((TargetUI *) ui)->menuItemSwitch(renderer->spriteList.at(engine->targetIndex - 1));
                        engine->targetIndex -= 1;
                    }
                } else if (ui->idstr == "SpellUI") {
                    int prevcountervalue = spellCounter;
                    if ((spellCounter-1) >= 0) {
                        spellCounter -= 1;
                        ((SpellUI *) ui)->menuItemSwitch(*((SpellUI *) ui)->spellTexts[prevcountervalue],
                                                         *((SpellUI *) ui)->spellTexts[spellCounter]);
                    }
                }
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
                if (ui->idstr == "FightUI") {

                    if (state->currentAction == "attack") {
                        engine::MoveInUI *cmd = new engine::MoveInUI(state, 1, "spell");
                        engine->addCmd(cmd);
                        ((FightUI *) ui)->menuItemSwitch(((FightUI *) ui)->attack, ((FightUI *) ui)->abilities);
                    }
                    if (state->currentAction == "overdrive") {
                        engine::MoveInUI *cmd = new engine::MoveInUI(state, 1, "item");
                        engine->addCmd(cmd);
                        ((FightUI *) ui)->menuItemSwitch(((FightUI *) ui)->overdrive, ((FightUI *) ui)->item);
                    }
                } else if (ui->idstr == "TargetUI") {
                    if (engine->target == state->getElementList()->element
                            .at(state->getElementList()->element.size() - 1)) {
                        engine->target = state->getElementList()->element.at(0);
                        ((TargetUI *) ui)->menuItemSwitch(renderer->spriteList.at(0));
                        engine->targetIndex = 0;
                    } else {
                        engine->target = state->getElementList()->element.at(engine->targetIndex + 1);
                        ((TargetUI *) ui)->menuItemSwitch(renderer->spriteList.at(engine->targetIndex + 1));
                        engine->targetIndex += 1;
                    }
                } else if (ui->idstr == "SpellUI") {
                    int prevcountervalue = spellCounter;
                    if ((spellCounter+1) < ((SpellUI *) ui)->maxSpell) {
                        spellCounter += 1;
                        ((SpellUI *) ui)->menuItemSwitch(*((SpellUI *) ui)->spellTexts[prevcountervalue],
                                                         *((SpellUI *) ui)->spellTexts[spellCounter]);
                    }
                }
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Return)) {
                if (ui->idstr == "FightUI") {
                    if (!state->getElementList()->element[2]->getIsDead())
                    {
                        engine->target = state->getElementList()->element[2];
                        engine->targetIndex = 2;
                        if (state->currentAction == "attack")
                            ui = new TargetUI(window, renderer->spriteList[2]);
                    } else if (!state->getElementList()->element[3]->getIsDead())
                    {
                        engine->target = state->getElementList()->element[3];
                        engine->targetIndex = 3;
                        if (state->currentAction == "attack")
                            ui = new TargetUI(window, renderer->spriteList[3]);
                    } else {
                        engine->target = state->getElementList()->element[4];
                        engine->targetIndex = 4;
                        if (state->currentAction == "attack")
                            ui = new TargetUI(window, renderer->spriteList[4]);
                    }

                    if (state->currentAction == "spell")
                        ui = new SpellUI(window, state->currentTurn->getAbility()->getAbility());

                } else if (ui->idstr == "TargetUI") {
                    if (state->currentAction == "attack") {
                        engine::Action *action = new engine::Action(state->currentTurn,
                                                                    engine->target,
                                                                    15);
                        action->setState(state);
                        engine->addCmd(action);

                        state->setPlayerFinishedTurn(true);
                        engine->target = state->getElementList()->element[2];
                        engine->targetIndex = 2;
                        ui = new FightUI(window);
                        engine->getRules()->NextTurn();
                        engine->turnInit(engine->getRules()->getTurnList()[0]);
                    }
                    if (state->currentAction == "item") {
                        state->setPlayerFinishedTurn(true);
                        ui = new FightUI(window);
                    }
                    if (state->currentAction == "overdrive") {
                        state->setPlayerFinishedTurn(true);
                        ui = new FightUI(window);

                    }
                    if (state->currentAction == "spell") {
                        engine::Action *action = new engine::Action(state->currentTurn,
                                                                    engine->target,
                                                                    engine->spellToCast);
                        action->setState(state);
                        engine->addCmd(action);

                        state->setPlayerFinishedTurn(true);
                        ui = new FightUI(window);
                        engine->getRules()->NextTurn();
                        engine->turnInit(engine->getRules()->getTurnList()[0]);

                    }


                } else if (ui->idstr == "SpellUI") {
                    auto pos = std::find(((SpellUI *) ui)->spells.begin(),
                                        ((SpellUI *) ui)->spells.end(),
                                        ((SpellUI *) ui)->spellTexts[spellCounter]->getString());

                    //std::cout << ((SpellUI *)ui)->spellTexts[spellCounter]->getString() << std::endl;

                    if(pos != ((SpellUI *) ui)->spells.end()) {
                        engine->spellToCast = pos - ((SpellUI *) ui)->spells.begin();
                        ui = new TargetUI(window, renderer->spriteList[2]);
                    }
                }
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) {
                if ((ui->idstr == "TargetUI")|(ui->idstr == "SpellUI")) {
                    ui = new FightUI(window);
                    state-> currentAction = "attack";
                }
            }
        }
        else if((event.type == sf::Event::KeyPressed ) & ((state->currentTurn->getIsCharacter() &
                !engine->getRules()->getAICharNeeded()) | !(!state->currentTurn->getIsCharacter() &
                !engine->getRules()->getAIMonsterNeeded())  )) turnPlayedByAI(engine->getRules()->getLevelAI());

    }

    state::State *Fight::getState() {
        return state;
    }

    void Fight::turnPlayedByAI(int id) {
        ai::AI* ai;
        engine::Action *action = nullptr; //DAFUQ MAMENE, DAFUQ
        bool notify = false;

        switch(id){
            case 0 :
                ai = new ai::RandomChoice(engine);
                break;

            case 1 :
                ai = new ai::RandomGoodChoice(engine);
                break;

            case 2 :
                ai = new ai::SmartChoice(engine);
                break;

            default :
                ai = new ai::RandomChoice(engine);
                break;
        }

        ai->run();
        action->apply(state, state->currentTurn, ai->getChoiceAction(), ai->getChoiceTarget(), notify);
        std::cout << "L'IA a attaqué " << ai->getChoiceTarget()->getName() <<
                  " avec cette action " << ai->getChoiceAction() << "\n" << std::endl;
        ui = new FightUI(window);
        engine->getRules()->NextTurn();
        engine->turnInit(engine->getRules()->getTurnList()[0]);

    }
};

void simKeyPress() {
}

#endif
