// Generated by dia2code
#ifndef RENDER__WORLDMAPRENDERER__C
#define RENDER__WORLDMAPRENDERER__C

#include "WorldmapRenderer.h"
#include <vector>
#include <sstream>
#include <iostream>
#include <assert.h>

namespace sf {
  class Text;
};
namespace render {
  class Renderer;


    WorldmapRenderer::WorldmapRenderer(sf::RenderWindow *rwindow) : Renderer(rwindow) {

        background.loadFromFile("../res/mapbackground.png");
        setBackground();
    }

    WorldmapRenderer::~WorldmapRenderer() {

    }

    void WorldmapRenderer::render() {
        window->draw(spriteScreen);
        window->draw(tmap);
        renderNodes(tabNodeSprite);

    }

    void WorldmapRenderer::setBackground() {
        spriteScreen.setTexture(background);
        spriteScreen.setScale(0.65, 0.65);
        spriteScreen.setOrigin((int)background.getSize().x/2, (int)background.getSize().y/2);
        spriteScreen.move(400, 300);
    }
    

    void WorldmapRenderer::initRender() {

        font.loadFromFile("../res/Square.ttf");
        TextureSetter* tSetter = new TextureSetter;
        std::vector<std::string> tempArray;
        tmap.setFont(font);
        tmap.setCharacterSize(80);
        tmap.setString("World Map");
        tmap.setPosition({ 400, 150 });
        tmap.setOrigin(tmap.getLocalBounds().width/2, tmap.getLocalBounds().height/2);
        
        for(auto i : tSetter->nodeTextureMap)
        {
            std::string tempStr;
            tempStr = i.first;
            for (int j=0; j<i.first.size(); j++)
            {
                if (tempStr[j] == '_') {
                    tempStr[j] = ' ';
                }
            }

            std::stringstream ss(tempStr);
            std::string tempChar;
            while (ss >> tempChar) {
                tempArray.push_back(tempChar);
            }
            assert(tempArray.size() == 4);
            tabNodeSprite.push_back(new render::NodeSprite(i.second,
                                                           std::stof(tempArray.at(2)),
                                                           std::stof(tempArray.at(3)),
                                                           tempArray.at(1),
                                                           std::stoi(tempArray.at(0))));

            tempArray.clear();
        }

        for(size_t i=0;i<tabNodeSprite.size();i++){

            tabNodeSprite.at(i)->setPosition({tabNodeSprite.at(i)->getPositionX(),
                                              tabNodeSprite.at(i)->getPositionY()});
            tabNodeSprite.at(i)->setTexture(*tabNodeSprite.at(i)->texture);
        }
    }

    void WorldmapRenderer::renderNodes(std::vector<render::NodeSprite *> tabNode) {

        for(auto i = 0; i < tabNode.size(); i++)
        {

            window->draw(*tabNode.at((unsigned long) i));
            //std::cout << "Drawing a node" + std::to_string(tabNode.at(i)->getPositionX())
                       //  + std::to_string(tabNode.at(i)->getPositionY()) << std::endl;
        }

    }


}

#include "Renderer.h"

namespace render {


};

#endif
